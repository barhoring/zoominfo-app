{"version":3,"sources":["github.svg","stackoverflow.svg","QuesionsContainer.js","QuestionsNav.js","Questions.js","Credit.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","QuesionsContainer","props","content","options","selectedAnswer","setSelectedAnswer","isAnswerCorrect","cNames","className","map","option","index","onClick","key","QuestionsNav","questions","questionIndex","setQuestionIndex","checkCorrect","setIsAnswerCorrect","hidden","finalAnswerString","length","Object","keys","question","shuffle","unshuffled","a","sort","Math","random","value","b","Questions","useState","setQuestions","correctAnswers","setCorrectAnswers","uri","useEffect","fetch","json","then","res","q","id","correctString","shuffledQuestions","catch","err","console","log","fetchData","style","display","flexDirection","alignItems","justifyContent","width","answerString","isCorrect","Credit","fontSize","href","src","stackoverflow","alt","github","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.9d699a45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.f380cb75.svg\";","module.exports = __webpack_public_path__ + \"static/media/stackoverflow.1c683041.svg\";","import React from \"react\";\r\n\r\nfunction QuesionsContainer(props) {\r\n  const {\r\n    content,\r\n    options,\r\n    selectedAnswer,\r\n    setSelectedAnswer,\r\n    isAnswerCorrect\r\n  } = props;\r\n\r\n  let cNames = \"\";\r\n\r\n  if (isAnswerCorrect === true) {\r\n    cNames = \"Rectangle RectangleCorrect\";\r\n  } else if (isAnswerCorrect === false) {\r\n    cNames = \"Rectangle RectangleWrong\";\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>{content}</h2>\r\n      <div className=\"QuestionsContainer\">\r\n        {options.map((option, index) => {\r\n          return (\r\n            <button\r\n              onClick={() => {\r\n                // don't let user select another answer after revealing the correct answer\r\n                if (isAnswerCorrect != null) return;\r\n                setSelectedAnswer(index);\r\n              }}\r\n              key={option}\r\n              className={\r\n                index === selectedAnswer\r\n                  ? cNames || \"Rectangle RectangleSelect\"\r\n                  : \"Rectangle\"\r\n              }\r\n            >\r\n              <div className=\"ReactangleSmall OptionText Text\">{option}</div>\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuesionsContainer;\r\n","import React from \"react\";\r\n\r\nfunction QuestionsNav(props) {\r\n  const {\r\n    questions,\r\n    selectedAnswer,\r\n    setSelectedAnswer,\r\n    questionIndex,\r\n    setQuestionIndex,\r\n    checkCorrect,\r\n    isAnswerCorrect,\r\n    setIsAnswerCorrect\r\n  } = props;\r\n  return (\r\n    <div>\r\n      <div>\r\n        <button\r\n          hidden={isAnswerCorrect != null}\r\n          onClick={() => {\r\n            if (selectedAnswer === null) return;\r\n            const finalAnswerString =\r\n              questions[questionIndex].options[selectedAnswer];\r\n            return selectedAnswer != null\r\n              ? checkCorrect(finalAnswerString)\r\n              : null;\r\n          }}\r\n          className={selectedAnswer != null ? \"okSelected\" : \"okButton\"}\r\n        >\r\n          <div className=\"ReactangleSmall okText Text\">OK</div>\r\n        </button>\r\n\r\n        <button\r\n          hidden={isAnswerCorrect === null}\r\n          className={selectedAnswer != null ? \"okSelected\" : \"okButton\"}\r\n          onClick={() => {\r\n            if (\r\n              isAnswerCorrect === null ||\r\n              questionIndex === questions.length - 1\r\n            )\r\n              return;\r\n            setQuestionIndex(questionIndex + 1);\r\n            setSelectedAnswer(null);\r\n            setIsAnswerCorrect(null);\r\n          }}\r\n        >\r\n          <div className=\"ReactangleSmall okText Text\">Continue</div>\r\n        </button>\r\n      </div>\r\n      <p>\r\n        <div className=\"row\">\r\n          {Object.keys(questions).map((question, index) => (\r\n            <div\r\n              key={index} // it's ok to use index here\r\n              className={\r\n                questionIndex === index ? \"circle circleCurrent\" : \"circle\"\r\n              }\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionsNav;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport QuesionsContainer from \"./QuesionsContainer\";\r\nimport QuestionsNav from \"./QuestionsNav\";\r\n\r\nconst Questions = () => {\r\n  const [questions, setQuestions] = useState({});\r\n  const [questionIndex, setQuestionIndex] = useState(0);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [correctAnswers, setCorrectAnswers] = useState({});\r\n  const [isAnswerCorrect, setIsAnswerCorrect] = useState(null);\r\n\r\n  const checkCorrect = answerString => {\r\n    const isCorrect =\r\n      correctAnswers[questionIndex].correctString === answerString;\r\n    setIsAnswerCorrect(isCorrect);\r\n  };\r\n\r\n  const uri =\r\n    \"https://my-json-server.typicode.com/barhoring/fake-server/questions\";\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const res = await fetch(uri);\r\n      res\r\n        .json()\r\n        .then(res => {\r\n          setCorrectAnswers(\r\n            res.map(q => {\r\n              return { id: q.id, correctString: q.options[0] };\r\n            })\r\n          );\r\n          let shuffledQuestions = res.map(question => {\r\n            let { options } = question;\r\n            options = shuffle(options);\r\n            question.options = options;\r\n            return question;\r\n          });\r\n          setQuestions(shuffledQuestions);\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    fetchData();\r\n  }, []); // [] means the shuffle will occur for every refresh\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        width: \"80%\"\r\n        // border: \"solid\"\r\n      }}\r\n    >\r\n      {Object.keys(questions).length > 0 ? (\r\n        <QuesionsContainer\r\n          {...questions[questionIndex]}\r\n          selectedAnswer={selectedAnswer}\r\n          setSelectedAnswer={setSelectedAnswer}\r\n          isAnswerCorrect={isAnswerCorrect}\r\n        />\r\n      ) : null}\r\n\r\n      <p>\r\n        <QuestionsNav\r\n          questions={questions}\r\n          selectedAnswer={selectedAnswer}\r\n          setSelectedAnswer={setSelectedAnswer}\r\n          questionIndex={questionIndex}\r\n          setQuestionIndex={setQuestionIndex}\r\n          checkCorrect={checkCorrect}\r\n          isAnswerCorrect={isAnswerCorrect}\r\n          setIsAnswerCorrect={setIsAnswerCorrect}\r\n        />\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst shuffle = unshuffled => {\r\n  return unshuffled\r\n    .map(a => ({ sort: Math.random(), value: a }))\r\n    .sort((a, b) => a.sort - b.sort)\r\n    .map(a => a.value);\r\n};\r\n\r\nexport default Questions;\r\n","import React from \"react\";\r\n\r\nimport github from \"./github.svg\";\r\nimport stackoverflow from \"./stackoverflow.svg\";\r\n\r\nconst Credit = () => {\r\n  return (\r\n    <div>\r\n      <div style={{ fontSize: \"17px\" }}>Created by Bar Horing Amir</div>\r\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <a href=\"https://stackoverflow.com/users/6683217/bar-horing\">\r\n          <img src={stackoverflow} className=\"creditIcon\" alt=\"stackoverflow\" />\r\n        </a>\r\n        <a href=\"https://github.com/barhoring\">\r\n          <img src={github} className=\"creditIcon\" alt=\"github\" />\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Credit;\r\n","import React from \"react\";\r\nimport Questions from \"./Questions\";\r\nimport Credit from \"./Credit\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Questions />\r\n      <Credit />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}